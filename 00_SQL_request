
Determination du CA théorique par An (ne tenant pas compte du Discount) :

SELECT YEAR(order_date) as date,  SUM(ROUND(oi.list_price,2)) as  CA
FROM orders o
left JOIN order_items oi on o.order_id = oi.order_id -- jointure des tables orders_items et orders
group by date
order by date


"2016"  "1806105.07"
"2017"  "2567332.96"
"2018"  "1352968.54"

détermination du Volume par an : 

SELECT year(order_date) as date , sum(quantity)
FROM orders o
left JOIN order_items oi on o.order_id = oi.order_id
group by date

"2016"	"2663"
"2017"	"3099"
"2018"	"1316"


Determination du magasin qui enregistre le plus de commande :

SELECT o.store_id, st.store_name, COUNT(order_id) as nb_cmde
FROM orders o
LEFT JOIN stores st on o.store_id = st.store_id -- jointure des tables orders et stores
GROUP BY o.store_id
ORDER BY nb_cmde DESC

"2"	"Baldwin Bikes"	"1093"
"1"	"Santa Cruz Bikes"	"348"
"3"	"Rowlett Bikes"	"174"


Cout du discount / An

SELECT year(order_date) as date , sum(ROUND(quantity*list_price*discount,2)) as discount
FROM orders o
left JOIN order_items oi on o.order_id = oi.order_id
group by date

"2016"	"282108.30"
"2017"	"398309.96"
"2018"	"209460.91"


Evolution du discount par an et par mois (voir si il y a des pics)

SELECT year(order_date) as date, month(order_date) as month_date , sum(ROUND(quantity*list_price*discount,2)) as discount
FROM orders o
left JOIN order_items oi on o.order_id = oi.order_id
group by date, month_date

Evolution des cmde par marque de Bike

SELECT year(order_date) as Year, b.brand_name, sum(quantity)
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
LEFT JOIN brands as b on b.brand_id = pd.brand_id
group by year, brand_name
order by Year

Evolution des commandes par marque en 2017 :

SELECT year(order_date) as Year, b.brand_name, sum(quantity)
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id -- création des différentes jointures des tables
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
LEFT JOIN brands as b on b.brand_id = pd.brand_id
group by year, brand_name
having year = 2017 -- having pour faire filtrer l'année
order by sum(quantity) desc - classement par quantité descendant

Suivi des vente par catégorie et quantité 
    
SELECT year(order_date) as Year, cat.category_name, sum(quantity)
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
group by year, category_name
order by Year

"2016"	"Children Bicycles"	"350"
"2016"	"Comfort Bicycles"	"313"
"2016"	"Cruisers Bicycles"	"924"
"2016"	"Cyclocross Bicycles"	"233"
"2016"	"Electric Bikes"	"104"
"2016"	"Mountain Bikes"	"739"
"2017"	"Children Bicycles"	"589"
"2017"	"Comfort Bicycles"	"373"
"2017"	"Cruisers Bicycles"	"814"
"2017"	"Cyclocross Bicycles"	"128"
"2017"	"Electric Bikes"	"98"
"2017"	"Mountain Bikes"	"764"
"2017"	"Road Bikes"	"333"
"2018"	"Children Bicycles"	"240"
"2018"	"Comfort Bicycles"	"127"
"2018"	"Cruisers Bicycles"	"325"
"2018"	"Cyclocross Bicycles"	"33"
"2018"	"Electric Bikes"	"113"
"2018"	"Mountain Bikes"	"252"
"2018"	"Road Bikes"	"226"

best sellers

SELECT  cat.category_name, sum(quantity)
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
group by  category_name
order by category_name

"Children Bicycles"	"1179"
"Comfort Bicycles"	"813"
"Cruisers Bicycles"	"2063"
"Cyclocross Bicycles"	"394"
"Electric Bikes"	"315"
"Mountain Bikes"	"1755"
"Road Bikes"	"559"

best sellers par an 

SELECT year(order_date) as Year,   cat.category_name, sum(quantity) as quantity
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
group by year, category_name
order by year, quantity desc

"2016"	"Cruisers Bicycles"	"924"
"2016"	"Mountain Bikes"	"739"
"2016"	"Children Bicycles"	"350"
"2016"	"Comfort Bicycles"	"313"
"2016"	"Cyclocross Bicycles"	"233"
"2016"	"Electric Bikes"	"104"
"2017"	"Cruisers Bicycles"	"814"
"2017"	"Mountain Bikes"	"764"
"2017"	"Children Bicycles"	"589"
"2017"	"Comfort Bicycles"	"373"
"2017"	"Road Bikes"	"333"
"2017"	"Cyclocross Bicycles"	"128"
"2017"	"Electric Bikes"	"98"
"2018"	"Cruisers Bicycles"	"325"
"2018"	"Mountain Bikes"	"252"
"2018"	"Children Bicycles"	"240"
"2018"	"Road Bikes"	"226"
"2018"	"Comfort Bicycles"	"127"
"2018"	"Electric Bikes"	"113"
"2018"	"Cyclocross Bicycles"	"33"

    
Vente en valeur par order_id
    
SELECT 
    order_id,
    ROUND(SUM(quantity * list_price * (1 - discount)), 2) final_sale_price
FROM 
    order_items
GROUP BY
    1

ORDER BY
    2 DESC
LIMIT 10 ;

"1541"	"29147.03"
"937"	"27050.72"
"1506"	"25574.96"
"1482"	"25365.44"
"1364"	"24890.62"
"930"	"24607.03"
"1348"	"20648.95"
"1334"	"20509.43"
"973"	"20177.75"
"1118"	"19329.95"


Classement des vente par an / magasin / catégorie / qt et CA

SELECT year(order_date) as Year,  st.store_name, cat.category_name, sum(quantity) as quantity, SUM(ROUND(oi.list_price,2))  AS CA
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
left join stores as st on o.store_id = st.store_id
group by store_name, category_name, year
order by year, store_name

"2016"	"Baldwin Bikes"	"Cyclocross Bicycles"	"157"	"166014.51"
"2016"	"Baldwin Bikes"	"Children Bicycles"	"248"	"44818.40"
"2016"	"Baldwin Bikes"	"Electric Bikes"	"61"	"125999.58"
"2016"	"Baldwin Bikes"	"Comfort Bicycles"	"226"	"82048.50"
"2016"	"Baldwin Bikes"	"Mountain Bikes"	"495"	"583907.68"
"2016"	"Baldwin Bikes"	"Cruisers Bicycles"	"624"	"191321.17"
"2016"	"Rowlett Bikes"	"Cyclocross Bicycles"	"17"	"17962.93"
"2016"	"Rowlett Bikes"	"Children Bicycles"	"34"	"6719.76"
"2016"	"Rowlett Bikes"	"Electric Bikes"	"12"	"26999.91"
"2016"	"Rowlett Bikes"	"Comfort Bicycles"	"25"	"9799.82"
"2016"	"Rowlett Bikes"	"Mountain Bikes"	"80"	"105007.48"
"2016"	"Rowlett Bikes"	"Cruisers Bicycles"	"103"	"31045.55"
"2016"	"Santa Cruz Bikes"	"Cyclocross Bicycles"	"59"	"61105.83"
"2016"	"Santa Cruz Bikes"	"Children Bicycles"	"68"	"12329.56"
"2016"	"Santa Cruz Bikes"	"Electric Bikes"	"31"	"65999.78"
"2016"	"Santa Cruz Bikes"	"Comfort Bicycles"	"62"	"22449.59"
"2016"	"Santa Cruz Bikes"	"Mountain Bikes"	"164"	"191576.90"
"2016"	"Santa Cruz Bikes"	"Cruisers Bicycles"	"197"	"60998.12"
"2017"	"Baldwin Bikes"	"Children Bicycles"	"411"	"78637.24"
"2017"	"Baldwin Bikes"	"Electric Bikes"	"79"	"172159.50"
"2017"	"Baldwin Bikes"	"Comfort Bicycles"	"258"	"84307.31"
"2017"	"Baldwin Bikes"	"Mountain Bikes"	"516"	"615174.46"
"2017"	"Baldwin Bikes"	"Cruisers Bicycles"	"569"	"203220.58"
"2017"	"Baldwin Bikes"	"Cyclocross Bicycles"	"94"	"166032.50"
"2017"	"Baldwin Bikes"	"Road Bikes"	"232"	"534814.43"
"2017"	"Rowlett Bikes"	"Children Bicycles"	"62"	"10879.60"
"2017"	"Rowlett Bikes"	"Electric Bikes"	"5"	"12679.95"
"2017"	"Rowlett Bikes"	"Comfort Bicycles"	"46"	"15002.70"
"2017"	"Rowlett Bikes"	"Mountain Bikes"	"91"	"89496.39"
"2017"	"Rowlett Bikes"	"Cruisers Bicycles"	"102"	"31024.40"
"2017"	"Rowlett Bikes"	"Cyclocross Bicycles"	"12"	"18778.95"
"2017"	"Rowlett Bikes"	"Road Bikes"	"45"	"115453.70"
"2017"	"Santa Cruz Bikes"	"Comfort Bicycles"	"69"	"22284.55"
"2017"	"Santa Cruz Bikes"	"Electric Bikes"	"14"	"23239.91"
"2017"	"Santa Cruz Bikes"	"Mountain Bikes"	"157"	"153869.98"
"2017"	"Santa Cruz Bikes"	"Cruisers Bicycles"	"143"	"47302.10"
"2017"	"Santa Cruz Bikes"	"Children Bicycles"	"116"	"22039.19"
"2017"	"Santa Cruz Bikes"	"Cyclocross Bicycles"	"22"	"30683.89"
"2017"	"Santa Cruz Bikes"	"Road Bikes"	"56"	"120251.63"
"2018"	"Baldwin Bikes"	"Comfort Bicycles"	"71"	"28112.54"
"2018"	"Baldwin Bikes"	"Mountain Bikes"	"159"	"202946.04"
"2018"	"Baldwin Bikes"	"Cruisers Bicycles"	"203"	"116026.60"
"2018"	"Baldwin Bikes"	"Cyclocross Bicycles"	"20"	"30276.92"
"2018"	"Baldwin Bikes"	"Road Bikes"	"142"	"309498.16"
"2018"	"Baldwin Bikes"	"Children Bicycles"	"152"	"27399.00"
"2018"	"Baldwin Bikes"	"Electric Bikes"	"62"	"132239.60"
"2018"	"Rowlett Bikes"	"Comfort Bicycles"	"16"	"7012.90"
"2018"	"Rowlett Bikes"	"Mountain Bikes"	"26"	"31348.83"
"2018"	"Rowlett Bikes"	"Cruisers Bicycles"	"40"	"16556.75"
"2018"	"Rowlett Bikes"	"Cyclocross Bicycles"	"3"	"8048.98"
"2018"	"Rowlett Bikes"	"Road Bikes"	"27"	"42249.82"
"2018"	"Rowlett Bikes"	"Children Bicycles"	"21"	"3409.87"
"2018"	"Rowlett Bikes"	"Electric Bikes"	"16"	"40599.89"
"2018"	"Santa Cruz Bikes"	"Children Bicycles"	"67"	"12009.56"
"2018"	"Santa Cruz Bikes"	"Mountain Bikes"	"67"	"68130.59"
"2018"	"Santa Cruz Bikes"	"Comfort Bicycles"	"40"	"18398.72"
"2018"	"Santa Cruz Bikes"	"Cruisers Bicycles"	"82"	"46820.44"
"2018"	"Santa Cruz Bikes"	"Cyclocross Bicycles"	"10"	"20799.94"
"2018"	"Santa Cruz Bikes"	"Road Bikes"	"57"	"113063.63"
"2018"	"Santa Cruz Bikes"	"Electric Bikes"	"35"	"78019.76"


moyenne d article commandé :

SELECT avg(quanity)
FROM order_items 

1.48

CALCUL DU CA PAR order_id:

SELECT order_id, ROUND((quantity*list_price)-(quantity*list_price*discount),2) as CA
FROM order_items
group by order_id
limit 20

"1"	"479.99"
"2"	"557.99"
"3"	"949.99"
"4"	"1349.98"
"5"	"2943.10"
"6"	"417.57"
"7"	"492.89"
"8"	"256.49"
"9"	"7199.98"
"10"	"242.99"
"11"	"1709.99"
"12"	"5219.98"
"13"	"242.99"
"14"	"437.09"
"15"	"1022.98"
"16"	"1439.99"
"17"	"1673.99"
"18"	"1199.98"
"19"	"1440.57"
"20"	"2789.99"


-- calcul CA total :
SELECT  sum(ROUND((quantity*list_price)-(quantity*list_price*discount),2)) as CA
    FROM order_items


Calcul du CA et de la moyenne de CA par order ID en 1 requete (partition by ) :

SELECT 
    YEAR(order_date) AS year,
    o.order_id,
    ROUND(SUM(quantity * oi.list_price - quantity * oi.list_price * discount), 2) AS CA,
    ROUND(SUM((quantity * oi.list_price - quantity * oi.list_price * discount) / quantity)
        OVER (PARTITION BY o.order_id),2) AS Avg_CA
FROM 
    orders o
LEFT JOIN 
    order_items oi ON o.order_id = oi.order_id
LEFT JOIN 
    products pd ON oi.product_id = pd.product_id
LEFT JOIN 
    categories cat ON pd.category_id = cat.category_id
LEFT JOIN 
    stores st ON o.store_id = st.store_id
Group by year(order_date), order_id



CAlcul du CA par an, nb de cmde et avg_ca par An


SELECT 
    YEAR(order_date) AS year,
    st.store_name,
    COUNT(DISTINCT o.order_id) as nb_cmde,
    ROUND(SUM(quantity * oi.list_price - quantity * oi.list_price * discount), 2) AS CA,
    ROUND(SUM(quantity * oi.list_price - quantity * oi.list_price * discount)/ COUNT(DISTINCT o.order_id), 2) AS Avg_CA
FROM 
    orders o
LEFT JOIN 
    order_items oi ON o.order_id = oi.order_id
LEFT JOIN 
    products pd ON oi.product_id = pd.product_id
LEFT JOIN 
    categories cat ON pd.category_id = cat.category_id
LEFT JOIN 
    stores st ON o.store_id = st.store_id
Group by year(order_date), store_name


evaluation du cout du discount :

SELECT 
    YEAR(order_date) AS year,
    st.store_name,
    COUNT(DISTINCT o.order_id) as nb_cmde,
    ROUND(SUM(quantity * oi.list_price - quantity * oi.list_price * discount), 2) AS CA,
    ROUND(SUM(quantity * oi.list_price - quantity * oi.list_price * discount)/ COUNT(DISTINCT o.order_id), 2) AS Avg_CA,
    ROUND(SUM(quantity * oi.list_price * discount), 2) AS Amount_discount,
    ROUND(SUM(quantity * oi.list_price * discount)/ COUNT(DISTINCT o.order_id), 2) as AVG_Amount_discount,
    ROUND(SUM(quantity * oi.list_price * discount)/ SUM(quantity * oi.list_price - quantity * oi.list_price * discount),2)*100 AS Discount_percentage
FROM 
    orders o
LEFT JOIN 
    order_items oi ON o.order_id = oi.order_id
LEFT JOIN 
    products pd ON oi.product_id = pd.product_id
LEFT JOIN 
    categories cat ON pd.category_id = cat.category_id
LEFT JOIN 
    stores st ON o.store_id = st.store_id
Group by year(order_date), store_name

Classement des vendeurs par magasin et par an :

SELECT year(order_date) as Year, sto.store_name, st.last_name, sum(quantity) as quantity
FROM orders o 
left join order_items as oi ON o.order_id = oi.order_id
left join products as pd on oi.product_id = pd.product_id
left join categories as cat on pd.category_id = cat.category_id
LEFT JOIN staffs AS st ON st.staff_id = o.staff_id
left join stores AS sto on sto.store_id = o.store_id
group by year, store_name, last_name
order by year, quantity desc

"2016"	"Baldwin Bikes"	"Daniel"	"936"
"2016"	"Baldwin Bikes"	"Boyer"	"875"
"2016"	"Santa Cruz Bikes"	"Serrano"	"325"
"2016"	"Santa Cruz Bikes"	"Copeland"	"256"
"2016"	"Rowlett Bikes"	"Vargas"	"139"
"2016"	"Rowlett Bikes"	"Terrell"	"132"
"2017"	"Baldwin Bikes"	"Boyer"	"1136"
"2017"	"Baldwin Bikes"	"Daniel"	"1023"
"2017"	"Santa Cruz Bikes"	"Serrano"	"303"
"2017"	"Santa Cruz Bikes"	"Copeland"	"274"
"2017"	"Rowlett Bikes"	"Terrell"	"199"
"2017"	"Rowlett Bikes"	"Vargas"	"164"
"2018"	"Baldwin Bikes"	"Boyer"	"408"
"2018"	"Baldwin Bikes"	"Daniel"	"401"
"2018"	"Santa Cruz Bikes"	"Serrano"	"203"
"2018"	"Santa Cruz Bikes"	"Copeland"	"155"
"2018"	"Rowlett Bikes"	"Vargas"	"109"
"2018"	"Rowlett Bikes"	"Terrell"	"40"






